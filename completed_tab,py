import json
from PyQt6.QtWidgets import QWidget, QVBoxLayout, QTabWidget, QTextEdit, QScrollArea
from PyQt6.QtCore import Qt

class CompletedBatchResultsWidget(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # Create a tab widget
        self.tab_widget = QTabWidget()
        layout.addWidget(self.tab_widget)

        # Load and display results from the JSONL file
        self.load_results()

    def load_results(self):
        file_path = "completed_results/completed_batch_chOURci4Ij0ZFyprBKllYIXz.jsonl"
        try:
            with open(file_path, 'r') as file:
                for line in file:
                    data = json.loads(line)
                    self.add_result_tab(data)
        except FileNotFoundError:
            print(f"File not found: {file_path}")
        except json.JSONDecodeError:
            print(f"Invalid JSON in file: {file_path}")

    def add_result_tab(self, data):
        # Create a new tab for each result
        tab = QWidget()
        tab_layout = QVBoxLayout(tab)

        # Create a text edit to display the JSON content
        text_edit = QTextEdit()
        text_edit.setReadOnly(True)
        text_edit.setLineWrapMode(QTextEdit.LineWrapMode.NoWrap)

        # Format the JSON data for better readability
        formatted_json = json.dumps(data, indent=2)
        text_edit.setText(formatted_json)

        # Create a scroll area and add the text edit to it
        scroll_area = QScrollArea()
        scroll_area.setWidget(text_edit)
        scroll_area.setWidgetResizable(True)

        tab_layout.addWidget(scroll_area)

        # Add the tab to the tab widget
        tab_name = f"Result {self.tab_widget.count() + 1}"
        self.tab_widget.addTab(tab, tab_name)

# Usage:
# completed_batch_widget = CompletedBatchResultsWidget()
# Add this widget to your main window or wherever appropriate in your GUI
